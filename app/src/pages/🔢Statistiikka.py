import streamlit as st
import requests
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt

st.set_page_config(
    page_title= "Tilastoja",
    page_icon= "üî¢",
    layout= "wide"
)

st.title("üìü Tilastoja")
st.markdown("""
            T√§ll√§ sivulla n√§kyy HOPP ja NES datan tilastoja.
            
            Tilastot on luotu Gold-tason datalla.
""")

st.header("üå≤ Kainuu vs muu Suomi üá´üáÆ")

st.markdown("""
            T√§ss√§ analyysiss√§ vertaillaan **Kainuun** ja **muun Suomen** *HOPP*-datan asiakastyytyv√§isyyden keskiarvoja, ja k√§yt√§mme **T-testi√§** arvioidaksemme, ovatko erot merkitt√§vi√§.

            **T-testi** on tilastollinen testi, jolla voidaan vertailla kahden ryhm√§n, kuten **Kainuun** ja **muun Suomen**, v√§lill√§ olevia eroja.

            **T-arvo** kuvaa kahden ryhm√§n v√§lisen eron suuruuden verrattuna ryhmien sis√§iseen vaihteluun. **P-arvo** kertoo, kuinka todenn√§k√∂ist√§ on, ett√§ tulokset ovat syntyneet sattumalta.

            Jos **T-arvo** on suuri ja **P-arvo** on pieni, ryhmien ero on suuri ja tilastollisesti merkitsev√§.

            Valitse alla analysoitava kysymys, jolloin sen kysymyksen tulokset n√§ytet√§√§n.
""")

# Haetaan APIsta dataa
endpoint_gold_hopp = "http://database:8081/get/gold/hopp"

# Funktio hakee datan apista
@st.cache_data
def fetch_data(endpoint, dataset_name):
    response = requests.get(endpoint)
    if response.status_code == 200:
        json_data = response.json()
        data = pd.DataFrame(json_data)
        return data
    else:
        st.error(f"Error: {dataset_name}, {response.text}")
        return None

# Luodaan dataframe apista haetusta datasta
df = fetch_data(endpoint_gold_hopp, "Gold HOPP Data")

# Varmistetaan ett√§ ei ole tyhj√§
if df is not None:
    # Pudotetaan turhat sarakkeet
    df.drop(['_ts', '_attachments', '_etag', '_self', '_rid', 'id', '/medallion'], axis=1, inplace=True)
    # N√§iss√§ 3 kysymyksess√§ Kainuun rivill√§ 10 oli None, joten korvasin ne muiden rivien lukuarvoilla ja ottamalla niist√§ keskiarvon
    kainuu_mean_6 = df.iloc[8:14]['6_hoitajat_kertoivat_minulle_uuden_laakkeen_antamisen_yhteydessa_miksi_laaketta_annetaan'].mean()
    kainuu_mean_7 = df.iloc[8:14]['7_hoitajat_kertoivat_minulle_saamieni_laakkeiden_mahdollisista_sivuvaikutuksista'].mean()
    kainuu_mean_11 = df.iloc[8:14]['11_hoitajat_huolehtivat_etteivat_hoito_ja_tai_tutkimukset_aiheuttaneet_minulle_noloja_tai_kiusallisia_tilanteita'].mean()
    # Lis√§t√§√§n uudet keskiarvot None rivien tilalle
    df['6_hoitajat_kertoivat_minulle_uuden_laakkeen_antamisen_yhteydessa_miksi_laaketta_annetaan'] = df['6_hoitajat_kertoivat_minulle_uuden_laakkeen_antamisen_yhteydessa_miksi_laaketta_annetaan'].fillna(kainuu_mean_6)
    df['7_hoitajat_kertoivat_minulle_saamieni_laakkeiden_mahdollisista_sivuvaikutuksista'] = df['7_hoitajat_kertoivat_minulle_saamieni_laakkeiden_mahdollisista_sivuvaikutuksista'].fillna(kainuu_mean_7)
    df['11_hoitajat_huolehtivat_etteivat_hoito_ja_tai_tutkimukset_aiheuttaneet_minulle_noloja_tai_kiusallisia_tilanteita'] = df['11_hoitajat_huolehtivat_etteivat_hoito_ja_tai_tutkimukset_aiheuttaneet_minulle_noloja_tai_kiusallisia_tilanteita'].fillna(kainuu_mean_11)
    # Valitaan vain n√§m√§ sarakkeet
    kysymykset = [col for col in df.columns if col not in ['datajoukko', 'quarter']]
    # Voidaan valita kysymys
    kysymys = st.selectbox("Valitse kysymys", kysymykset)
    # Kainuun datajoukko
    kainuu = df[df['datajoukko'] == 'kainuu']
    # Muun Suomen datajoukko
    muu_suomi = df[df['datajoukko'] == 'kooste']

    # K√§ytet√§√§n Scipy moduulia laskemaan T-testi
    t_stat, p_value = stats.ttest_ind(kainuu[kysymys], muu_suomi[kysymys])
    
    # Kun st.Button painaa uudelleen, niin teksti menee piiloon
    if 'show_text' not in st.session_state:
        st.session_state.show_text = False

    col3, col4 = st.columns(2)
    with col3:
        container = st.container(border=True)
        container.info("T-arvo")
        container.markdown(f'<h2 style="font-size:30px;">{t_stat:.3f}</h2>', unsafe_allow_html=True)
        if st.button("T-arvon info"):
            st.session_state.show_text = not st.session_state.show_text
            if st.session_state.show_text:
                container = st.container(border=True)
                container.write("Esimerkiksi T-arvo = 2 tarkoittaa, ett√§ ryhmien keskiarvojen ero on 2 kertaa suurempi, kuin ryhmien sis√§inen vaihtelu.")
                container.latex(r'''t = \frac{\bar{X} - \bar{Y}}{\sqrt{\frac{\bar{Var(X)}}{n_x} + \frac{\bar{Var(Y)}}{n_y}}}''')

    with col4:
        container = st.container(border=True)
        container.info("P-arvo")
        container.markdown(f'<h1 style="font-size:30px;">{p_value:.3f}</h1>', unsafe_allow_html=True)
        if st.button("P-arvon info"):
            st.session_state.show_text = not st.session_state.show_text
            if st.session_state.show_text:
                container = st.container(border=True)
                container.write("Esimerkiksi P-arvo = 0.05 tarkoittaa, ett√§ jos nollahypoteesi on totta, on 5% todenn√§k√∂isyys saada tulos sattumalta.")
                container.latex(r'''
                                p < 0.05 \text{ ... tulos on melkein merkitsev√§} \\
                                p< 0.01 \text{ ... tulos on merkitsev√§} \\
                                p < 0.001 \text{ ... tulos on eritt√§in merkitsev√§}''')

    if p_value < 0.001:
        st.success("TULOS: Ero Kainuun ja muun Suomen v√§lill√§ on tilastollisesti eritt√§in merkitsev√§!!! (p < 0.001).")
    elif p_value < 0.01:
        st.success("TULOS: Ero Kainuun ja muun Suomen v√§lill√§ on tilastollisesti merkitsev√§! (p < 0.01).")
    elif p_value < 0.05:
        st.success("TULOS: Ero Kainuun ja muun Suomen v√§lill√§ on tilastollisesti melkein merkitsev√§ (p < 0.05).")
    else:
        st.success("TULOS: Ero Kainuun ja muun Suomen v√§lill√§ ei ole tilastollisesti merkitsev√§.")

col1, col2 = st.columns(2)
with col1:
    st.header("üå≤ Kainuu")

with col2:
    st.header("üá´üáÆ Suomi")
